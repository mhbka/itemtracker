name: Backend/monolith deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'packages/monolith/**'
  workflow_dispatch:

jobs:
  setup:
      name: Setup environment
      runs-on: ubuntu-latest
      outputs:
        setup_done: true
      steps:
        - name: Setup
          uses: ./.github/actions/setup
          secrets:
            DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
            DOCKER_HUB_PAT: ${{ secrets.DOCKER_HUB_PAT }}
            GCP_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_CREDENTIALS }}
            GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
            
  check_image:
    name: Check for existing image
    runs-on: ubuntu-latest
    outputs:
      image_exists: ${{ steps.check_image.outputs.exists }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PAT }}

      - name: Check if image already exists
        id: check_image
        run: |
          if docker manifest inspect mhish/itemtracker_monolith:${{ github.sha }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build and push image
    needs: [check_image, setup]
    if: needs.check_image.outputs.image_exists == 'false'
    uses: ./.github/actions/build-push-backend
    with:
      commit_sha: ${{ github.sha }}
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PAT: ${{ secrets.DOCKER_HUB_PAT }}

  deploy:
    name: Deploy Service
    needs: [check_image, build, setup]
    if: always() && (needs.check_image.outputs.image_exists == 'true' || needs.build.result == 'success')
    uses: ./.github/actions/deploy-backend
    with:
      commit_sha: ${{ github.sha }}
    secrets:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}