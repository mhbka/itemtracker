name: Backend/monolith deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'packages/monolith/**'
  workflow_dispatch:

jobs:
  check_image:
    name: Check for existing image
    runs-on: ubuntu-latest
    outputs:
      image_exists: ${{ steps.check_image.outputs.exists }}
    
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PAT }}
      
      - name: Check if image already exists
        id: check_image
        run: |
          if docker manifest inspect mhish/itemtracker_monolith:${{ github.sha }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build and push image
    needs: check_image
    runs-on: ubuntu-latest
    if: needs.check_image.outputs.image_exists == 'false'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PAT }}
      
      - name: Check project
        working-directory: ./packages/monolith
        run: cargo check
      
      - name: Build and push Docker image
        working-directory: ./packages/monolith
        run: |
          docker build -t mhish/itemtracker_monolith:${{ github.sha }} .
          docker push mhish/itemtracker_monolith:${{ github.sha }}

  deploy:
    name: Deploy
    needs: [check_image, build]
    runs-on: ubuntu-latest
    if: always() && (needs.check_image.outputs.image_exists == 'true' || needs.build.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_CREDENTIALS }}
      
      - name: Configure Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Configure Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init -backend-config=backend.conf
        
      - name: Validate Terraform configuration
        working-directory: ./terraform
        run: terraform validate
        
      - name: Apply infrastructure changes
        working-directory: ./terraform
        run: terraform apply -auto-approve